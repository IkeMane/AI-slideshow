from openai import OpenAI
import base64
from PIL import Image
import io
import json
import os
from dotenv import load_dotenv

# For creating a PowerPoint presentation
from pptx import Presentation
from pptx.util import Inches


load_dotenv()
api_key = os.getenv('OPENAI_API_KEY')
Client = OpenAI(api_key=api_key)


def generate_response(prompt: str, model: str = 'gpt-4-1106-preview', json_response: bool = False, dall_e: bool = False, view_image: str = None):
    '''
    Generate a response from AI 
    param: prompt: a message to send to the AI
    param: model: the model to use. Only use gpt-4-1106-preview or gpt-3.5-turbo-1106 for simpler responses
    param: json_response: if True, the response will be returned as a json object. Most the time we wont use this.
    param: dall_e: if True, the response will be an image url generated by Dall-e
    param: view_image: This is the image url to view. Use this if you want to view an image from the model.
    '''
    messages= list()
    messages.append({"role": "user", "content": prompt})
    if json_response:
        response = Client.chat.completions.create(model=model,messages=messages,response_format={ "type": "json_object" })
        response_message = response.choices[0].message
        return json.dumps({"response_message":response_message.content})
    elif dall_e:
        # prompt = messages[-1].content
        response = Client.images.generate(model="dall-e-3", prompt=prompt, size="1024x1024", quality="hd", n=1, style="vivid",)
        image_url = response.data[0].url
        return json.dumps({"image_url":image_url})
    elif view_image:
        model = "gpt-4-vision-preview"
        messages.append({"role": "user","content": [{"type": "text", "text": " "},{"type": "image_url", "image_url": {"url": view_image,},},],})
        response = Client.chat.completions.create(model=model,messages=messages)
        response_message = response.choices[0].message
        return json.dumps({"response_message":response_message.content})
    else:
        response = Client.chat.completions.create(model=model,messages=messages,)
        response_message = response.choices[0].message
        return json.dumps({"response_message":response_message.content})
    

def get_image_as_base64(file_path):
    """
    Encodes an image as a base64 string.

    :param file_path: Path to the image file.
    :return: Base64-encoded string of the image.
    """
    with Image.open(file_path) as image:
        buffered = io.BytesIO()
        image.save(buffered, format="PNG")  # You can change the format as needed
        img_str = base64.b64encode(buffered.getvalue()).decode('utf-8')
    return img_str

def create_image_data(file_path):
    """
    Creates a dictionary object that includes the base64-encoded image.
    
    :param file_path: Path to the image file.
    :return: Dictionary with the image data.
    """
    base64_image = get_image_as_base64(file_path)
    return {
        "image_url": {
            "content": base64_image,
            "type": "base64"
        }
    }




def create_presentation(json_data):
    prs = Presentation()
    for slide_data in json_data['presentation']['slides']:
        slide = add_slide(prs)
        if slide_data['type'] == 'table':
            add_table(slide, slide_data['title'], slide_data['headers'], slide_data['rows'])
        elif slide_data['type'] == 'text':
            add_text_slide(slide, slide_data['title'], slide_data['content'])
    return prs

def add_slide(presentation, layout=5):
    slide_layout = presentation.slide_layouts[layout]
    return presentation.slides.add_slide(slide_layout)

def add_table(slide, title, headers, rows):
    title_shape = slide.shapes.title
    title_shape.text = title
    table = slide.shapes.add_table(1 + len(rows), len(headers), Inches(1), Inches(1.5), Inches(8), Inches(0.8)).table
    for i, header in enumerate(headers):
        table.cell(0, i).text = header
    for row_index, row in enumerate(rows, start=1):
        for col_index, cell in enumerate(row):
            table.cell(row_index, col_index).text = cell

def add_text_slide(slide, title, content):
    title_shape = slide.shapes.title
    title_shape.text = title
    left = Inches(1)
    top = Inches(3)
    width = Inches(8)
    height = Inches(4)
    textbox = slide.shapes.add_textbox(left, top, width, height)
    text_frame = textbox.text_frame
    for line in content:
        p = text_frame.add_paragraph()
        p.text = line




# Function to encode the image
def encode_image(image_path):
    with open(image_path, "rb") as image_file:
        return base64.b64encode(image_file.read()).decode('utf-8')


def build_messages(base64_image):
    return{
            "role": "user",
            "content": [
                    {
                    "type": "text",
                    "text": "Here's and example format for the JSON youre required to provide based off the given image:"
                    },
                    {
                    "type": "text",
                    "text": """{
                        "presentation": {
                            "title": "title of the presentation",
                            "slides": [
                            {
                                "type": "text",
                                "title": "slide title",
                                "content": [
                                "content line",
                                "content line...",
                                ]
                            },
                            {
                                "type": "table",
                                "title": "slide title",
                                "headers": ["header", "header..."],
                                "rows": [
                                ["column content", "column content..."],
                                ["column content", "column content..."],
                                ]
                            }
                            ]
                        }
                        }"""
                    },
                    {
                    "type": "image_url",
                    "image_url": {
                        "url": f"data:image/jpeg;base64,{base64_image}"
                        }
                    }
            ]
        }


# Example usage:
if __name__ == "__main__":
    directory = 'screenshots'
    presentation = Presentation()
    messages = list()
    messages.append({"role": "system", "content": "I read the image and provide the content in a consistant structured json format. I can create text or table slides based off the image im given."})     
    for filename in os.listdir(directory):
        if filename.endswith('.png'):
            file_path = os.path.join(directory, filename)
            base64_image = encode_image(file_path)


            messages.append(build_messages(base64_image)) #add image message to conversation

            response = Client.chat.completions.create(
                model="gpt-4-turbo",
                messages=messages,
                response_format={ "type": "json_object" },
            )
    
            message = response.choices[0].message
            message_text = message.content
            messages.append({"role": "system", "content": message_text}) # add to conversation

            print(f"Response: {message_text}")

            #JSON read and processing
            json_data = message_text

            slide_data = json.loads(json_data)
            for slide_info in slide_data['presentation']['slides']:
                slide = presentation.slides.add_slide(presentation.slide_layouts[5])  # Blank slide layout
                if slide_info['type'] == 'table':
                    add_table(slide, slide_info['title'], slide_info['headers'], slide_info['rows'])
                elif slide_info['type'] == 'text':
                    add_text_slide(slide, slide_info['title'], slide_info['content'])


    presentation.save('AI_Presentation_Test.pptx')
    print("Presentation created successfully!")
# ````````